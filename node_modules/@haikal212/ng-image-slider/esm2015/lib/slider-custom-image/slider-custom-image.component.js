/**
 * @fileoverview added by tsickle
 * Generated from: lib/slider-custom-image/slider-custom-image.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { DomSanitizer } from '@angular/platform-browser';
import { NgImageSliderService } from './../ng-image-slider.service';
/** @type {?} */
const youtubeRegExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=|\?v=)([^#\&\?]*).*/;
/** @type {?} */
const validFileExtensions = ['jpeg', 'jpg', 'gif', 'png'];
/** @type {?} */
const validVideoExtensions = ['mp4'];
export class SliderCustomImageComponent {
    /**
     * @param {?} imageSliderService
     * @param {?} sanitizer
     * @param {?} document
     */
    constructor(imageSliderService, sanitizer, document) {
        this.imageSliderService = imageSliderService;
        this.sanitizer = sanitizer;
        this.YOUTUBE = 'youtube';
        this.IMAGE = 'image';
        this.VIDEO = 'video';
        this.fileUrl = '';
        this.fileExtension = '';
        this.type = this.IMAGE;
        this.imageLoading = true;
        // @inputs
        this.showVideo = false;
        this.videoAutoPlay = false;
        this.showVideoControls = 1;
        this.speed = 1;
        this.isVideo = false;
        this.alt = '';
        this.title = '';
        this.direction = 'ltr';
        this.ratio = false;
        this.lazy = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.imageUrl
            && this.imageUrl
            && this.imageUrl
            && typeof (this.imageUrl) === 'string'
            && ((changes.imageUrl && changes.imageUrl.firstChange)
                ||
                    (this.videoAutoPlay))) {
            this.setUrl();
        }
    }
    /**
     * @return {?}
     */
    setUrl() {
        /** @type {?} */
        const url = this.imageUrl;
        this.imageLoading = true;
        this.fileUrl = this.sanitizer.bypassSecurityTrustResourceUrl(url);
        this.fileExtension = url.split('.').pop().split(/\#|\?/)[0];
        if (this.imageSliderService.base64FileExtension(url)
            && (validFileExtensions.indexOf(this.imageSliderService.base64FileExtension(url).toLowerCase()) > -1
                || validVideoExtensions.indexOf(this.imageSliderService.base64FileExtension(url).toLowerCase()) > -1)) {
            this.fileExtension = this.imageSliderService.base64FileExtension(url);
        }
        // verify for youtube url
        /** @type {?} */
        const match = url.match(youtubeRegExp);
        if (match && match[2].length === 11) {
            if (this.showVideo) {
                this.type = this.YOUTUBE;
                this.fileUrl = this.sanitizer.bypassSecurityTrustResourceUrl(`${'https://www.youtube.com/embed/'}${match[2]}${this.videoAutoPlay ? '?autoplay=1&enablejsapi=1' : '?autoplay=0&enablejsapi=1'}${'&controls='}${this.showVideoControls}`);
            }
            else {
                this.type = this.IMAGE;
                this.fileUrl = this.sanitizer.bypassSecurityTrustResourceUrl(`https://img.youtube.com/vi/${match[2]}/0.jpg`);
            }
        }
        else if (this.fileExtension && validFileExtensions.indexOf(this.fileExtension.toLowerCase()) > -1) {
            this.type = this.IMAGE;
        }
        else if (this.fileExtension && validVideoExtensions.indexOf(this.fileExtension.toLowerCase()) > -1) {
            this.type = this.VIDEO;
            if (this.videoAutoPlay && document.getElementById(`video_${this.imageIndex}`)) {
                /** @type {?} */
                const videoObj = document.getElementById(`video_${this.imageIndex}`);
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    videoObj.play();
                }), this.speed * 1000);
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    videoClickHandler(event) {
        if (event && event.srcElement && !this.showVideoControls) {
            if (event.srcElement.paused) {
                event.srcElement.play();
            }
            else {
                event.srcElement.pause();
            }
        }
    }
}
SliderCustomImageComponent.decorators = [
    { type: Component, args: [{
                selector: 'custom-img',
                template: "<div *ngIf=\"fileUrl\" class=\"custom-image-main\" [ngClass]=\"{'ng-fullimage-loading': imageLoading}\">\r\n    <img class=\"image\"\r\n        (load)=\"imageLoading = false\"\r\n        [ngClass]=\"{'ratio': ratio}\"\r\n        *ngIf=\"type === IMAGE && fileUrl\"\r\n        [src]=\"fileUrl\"\r\n        [alt]=\"alt\"\r\n        [title]=\"title\"\r\n        [attr.loading]=\"lazy == true ? 'lazy' : null\">\r\n    <iframe class=\"youtube\"\r\n        *ngIf=\"type === YOUTUBE && fileUrl\"\r\n        [src]=\"fileUrl\"\r\n        [attr.loading]=\"lazy == true ? 'lazy' : null\"\r\n        frameborder=\"0\"\r\n        allow=\"autoplay\"\r\n        allowfullscreen></iframe>\r\n    <video class=\"video\"\r\n        [id]=\"'video_' + imageIndex\"\r\n        [ngClass]=\"{'ratio': ratio}\"\r\n        (click)=\"videoClickHandler($event)\"\r\n        [autoplay]=\"videoAutoPlay\"\r\n        *ngIf=\"type === VIDEO\"\r\n        type=\"video/mp4\"\r\n        [attr.controls]=\"showVideoControls ? showVideoControls : null\"\r\n        controlsList=\"nodownload\">\r\n        <source [src]=\"fileUrl\" type=\"video/mp4\">\r\n        Your browser does not support the video tag.\r\n    </video>\r\n    <div [dir]=\"direction\" *ngIf=\"!fileUrl\" class=\"invalid-msg\">Invalid file format</div>\r\n    <span *ngIf=\"type === YOUTUBE || type === VIDEO || isVideo\" class=\"youtube-icon\"></span>\r\n</div>"
            }] }
];
/** @nocollapse */
SliderCustomImageComponent.ctorParameters = () => [
    { type: NgImageSliderService },
    { type: DomSanitizer },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
SliderCustomImageComponent.propDecorators = {
    showVideo: [{ type: Input }],
    videoAutoPlay: [{ type: Input }],
    showVideoControls: [{ type: Input }],
    currentImageIndex: [{ type: Input }],
    imageIndex: [{ type: Input }],
    speed: [{ type: Input }],
    imageUrl: [{ type: Input }],
    isVideo: [{ type: Input }],
    alt: [{ type: Input }],
    title: [{ type: Input }],
    direction: [{ type: Input }],
    ratio: [{ type: Input }],
    lazy: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SliderCustomImageComponent.prototype.YOUTUBE;
    /** @type {?} */
    SliderCustomImageComponent.prototype.IMAGE;
    /** @type {?} */
    SliderCustomImageComponent.prototype.VIDEO;
    /** @type {?} */
    SliderCustomImageComponent.prototype.fileUrl;
    /** @type {?} */
    SliderCustomImageComponent.prototype.fileExtension;
    /** @type {?} */
    SliderCustomImageComponent.prototype.type;
    /** @type {?} */
    SliderCustomImageComponent.prototype.imageLoading;
    /** @type {?} */
    SliderCustomImageComponent.prototype.showVideo;
    /** @type {?} */
    SliderCustomImageComponent.prototype.videoAutoPlay;
    /** @type {?} */
    SliderCustomImageComponent.prototype.showVideoControls;
    /** @type {?} */
    SliderCustomImageComponent.prototype.currentImageIndex;
    /** @type {?} */
    SliderCustomImageComponent.prototype.imageIndex;
    /** @type {?} */
    SliderCustomImageComponent.prototype.speed;
    /** @type {?} */
    SliderCustomImageComponent.prototype.imageUrl;
    /** @type {?} */
    SliderCustomImageComponent.prototype.isVideo;
    /** @type {?} */
    SliderCustomImageComponent.prototype.alt;
    /** @type {?} */
    SliderCustomImageComponent.prototype.title;
    /** @type {?} */
    SliderCustomImageComponent.prototype.direction;
    /** @type {?} */
    SliderCustomImageComponent.prototype.ratio;
    /** @type {?} */
    SliderCustomImageComponent.prototype.lazy;
    /** @type {?} */
    SliderCustomImageComponent.prototype.imageSliderService;
    /**
     * @type {?}
     * @private
     */
    SliderCustomImageComponent.prototype.sanitizer;
}
//# sourceMappingURL=data:application/json;base64,